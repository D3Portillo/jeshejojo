{
  "language": "Solidity",
  "sources": {
    "contracts/MeinJokes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// NOTE: I want to enhance the way colors are stored.\n// Currently a HEX string is stored. Suggestions are welcomed :)\nstruct Jeshe {\n    bytes6 bgColor;\n    bytes6 textColor;\n    address author;\n    string content;\n}\n\n/// @title A Simple yet useful starter contract :)\n/// @author Denny Portillo\n/// @notice This implementation is used as a learning tool. Do not use in real-apps\ncontract MeinJokes {\n    uint64 nextItemIdx;\n    mapping(uint64 => Jeshe) itemsById;\n\n    /// @notice Log items by listed by owner along with it's item_id\n    /// @dev This indexed owner-item_id is usefull along with getItemsById fn\n    event ListedItem(address indexed owner, uint64 indexed item_id);\n\n    function totalItems() external view returns (uint64) {\n        return nextItemIdx;\n    }\n\n    /// @notice Get information about an item by providing it's id\n    function getItemById(uint64 _itemId) external view returns (Jeshe memory) {\n        return itemsById[_itemId];\n    }\n\n    /// @notice List/Create a Jeshejojo\n    /// @dev Emits #ListedItem\n    /// @param _content The message you want to store\n    /// @param _bgColor The background of your post. Just as facebook/instagram stories :p\n    /// @param _textColor Set a custom font-color for your post\n    function listItem(\n        string calldata _content,\n        bytes6 _bgColor,\n        bytes6 _textColor\n    ) external notEmptyOrGt200(_content) {\n        itemsById[nextItemIdx] = Jeshe(\n            _bgColor,\n            _textColor,\n            msg.sender,\n            _content\n        );\n        emit ListedItem(msg.sender, nextItemIdx++);\n    }\n\n    // MODIFIERS\n    modifier notEmptyOrGt200(string calldata _str) {\n        bytes memory _rawBytes = bytes(_str);\n        require(_rawBytes.length > 0, \"String cannot be empty\");\n        require(_rawBytes.length < 222, \"String.size cannot greater than 200\");\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}